services:
  # Zookeeper for Kafka
  zookeeper:
    image: confluentinc/cp-zookeeper:7.4.0
    hostname: zookeeper
    container_name: zookeeper
    ports:
      - "2181:2181"
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_TICK_TIME: 2000
    networks:
      - flink-kafka-network

  # Kafka Broker
  kafka:
    image: confluentinc/cp-kafka:7.4.0
    hostname: kafka
    container_name: kafka
    depends_on:
      - zookeeper
    ports:
      - "9092:9092"
      - "9101:9101"
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: "zookeeper:2181"
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT,PLAINTEXT_HOST:PLAINTEXT
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka:29092,PLAINTEXT_HOST://localhost:9092
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_TRANSACTION_STATE_LOG_MIN_ISR: 1
      KAFKA_TRANSACTION_STATE_LOG_REPLICATION_FACTOR: 1
      KAFKA_GROUP_INITIAL_REBALANCE_DELAY_MS: 0
      KAFKA_JMX_PORT: 9101
      KAFKA_JMX_HOSTNAME: localhost
      KAFKA_AUTO_CREATE_TOPICS_ENABLE: "true"
    networks:
      - flink-kafka-network
    healthcheck:
      test:
        ["CMD", "kafka-topics", "--bootstrap-server", "kafka:29092", "--list"]
      interval: 30s
      timeout: 10s
      retries: 5

  # Kafka Topic Initialization
  kafka-init:
    image: confluentinc/cp-kafka:7.4.0
    depends_on:
      kafka:
        condition: service_healthy
    command: |
      bash -c '
        echo "Waiting for Kafka to be ready..."
        sleep 10
        
        echo "Creating input topic: sensor_pressure_stream"
        kafka-topics --create \
          --bootstrap-server kafka:29092 \
          --topic sensor_pressure_stream \
          --partitions 6 \
          --replication-factor 1 \
          --config cleanup.policy=delete \
          --config retention.ms=604800000 \
          --if-not-exists
          
        echo "Creating output topic: vehicle_pressure_max"
        kafka-topics --create \
          --bootstrap-server kafka:29092 \
          --topic vehicle_pressure_max \
          --partitions 4 \
          --replication-factor 1 \
          --config cleanup.policy=compact \
          --config min.cleanable.dirty.ratio=0.1 \
          --if-not-exists
          
        echo "Topics created successfully!"
        kafka-topics --list --bootstrap-server kafka:29092
      '
    networks:
      - flink-kafka-network

  # Flink Job Manager
  jobmanager:
    image: flink:1.18-scala_2.12-java11
    hostname: jobmanager
    container_name: jobmanager
    ports:
      - "8081:8081"
    command: jobmanager
    environment:
      - |
        FLINK_PROPERTIES=
        jobmanager.rpc.address: jobmanager
        state.backend: rocksdb
        state.checkpoints.dir: file:///tmp/flink-checkpoints
        execution.checkpointing.interval: 60000
        execution.checkpointing.timeout: 600000
        execution.checkpointing.min-pause: 30000
        execution.checkpointing.max-concurrent-checkpoints: 1
        execution.checkpointing.externalized-checkpoint-retention: RETAIN_ON_CANCELLATION
        taskmanager.numberOfTaskSlots: 2
        parallelism.default: 6
    volumes:
      - ./flink-job/target:/opt/flink/usrlib
      - flink-checkpoints:/tmp/flink-checkpoints
    networks:
      - flink-kafka-network

  # Flink Task Manager 1
  taskmanager1:
    image: flink:1.18-scala_2.12-java11
    hostname: taskmanager1
    #container_name: taskmanager1
    depends_on:
      - jobmanager
    command: taskmanager
    scale: 1
    environment:
      - |
        FLINK_PROPERTIES=
        jobmanager.rpc.address: jobmanager
        taskmanager.numberOfTaskSlots: 2
        state.backend: rocksdb
        state.checkpoints.dir: file:///tmp/flink-checkpoints
    volumes:
      - ./flink-job/target:/opt/flink/usrlib
      - flink-checkpoints:/tmp/flink-checkpoints
    networks:
      - flink-kafka-network

  # Flink Task Manager 2
  taskmanager2:
    image: flink:1.18-scala_2.12-java11
    hostname: taskmanager2
    #container_name: taskmanager2
    depends_on:
      - jobmanager
    command: taskmanager
    scale: 1
    environment:
      - |
        FLINK_PROPERTIES=
        jobmanager.rpc.address: jobmanager
        taskmanager.numberOfTaskSlots: 2
        state.backend: rocksdb
        state.checkpoints.dir: file:///tmp/flink-checkpoints
    volumes:
      - ./flink-job/target:/opt/flink/usrlib
      - flink-checkpoints:/tmp/flink-checkpoints
    networks:
      - flink-kafka-network

  # Flink Task Manager 3
  taskmanager3:
    image: flink:1.18-scala_2.12-java11
    hostname: taskmanager3
    #container_name: taskmanager3
    depends_on:
      - jobmanager
    command: taskmanager
    scale: 1
    environment:
      - |
        FLINK_PROPERTIES=
        jobmanager.rpc.address: jobmanager
        taskmanager.numberOfTaskSlots: 2
        state.backend: rocksdb
        state.checkpoints.dir: file:///tmp/flink-checkpoints
    volumes:
      - ./flink-job/target:/opt/flink/usrlib
      - flink-checkpoints:/tmp/flink-checkpoints
    networks:
      - flink-kafka-network

  # Python Data Simulator
  data-simulator:
    build:
      context: ./python-simulator
      dockerfile: Dockerfile
    container_name: data-simulator
    depends_on:
      kafka-init:
        condition: service_completed_successfully
    environment:
      - KAFKA_BOOTSTRAP_SERVERS=kafka:29092
      - KAFKA_TOPIC=sensor_pressure_stream
      - SIMULATION_DURATION=0
      - MESSAGES_PER_SECOND=5
    networks:
      - flink-kafka-network
    volumes:
      - ./python-simulator:/app

  # Kafka UI for monitoring
  kafka-ui:
    image: provectuslabs/kafka-ui:latest
    container_name: kafka-ui
    depends_on:
      - kafka
    ports:
      - "8080:8080"
    environment:
      KAFKA_CLUSTERS_0_NAME: local
      KAFKA_CLUSTERS_0_BOOTSTRAPSERVERS: kafka:29092
      KAFKA_CLUSTERS_0_ZOOKEEPER: zookeeper:2181
    networks:
      - flink-kafka-network

volumes:
  flink-checkpoints:
  flink-savepoints:

networks:
  flink-kafka-network:
    driver: bridge
